{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAIAD,EAAAE,OAAOC,KAAK,CAAEC,SAAS,IAEvB,MAAMC,EAAaC,SAASC,cAAc,CAAC,iBACrCC,EAAYF,SAASC,cAAc,CAAC,gBACpCE,EAAcH,SAASC,cAAc,CAAC,kBACtCG,EAAYJ,SAASC,cAAc,UAEzC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAGpCJ,EAAQ,uBAAqBH,QAAiBC,OAE5CG,EAAK,sBAAoBJ,QAAiBC,OAG1CD,IAAaQ,SAASX,EAAYY,SACpCX,EAAUY,UAAW,EAAK,GAE3BT,EAAM,G,CA8CbH,EAAUa,iBAAiB,SA1CLC,IAGpB,GAFAA,EAAMC,iBAGkB,KAAtBhB,EAAYY,OACS,KAArBhB,EAAWgB,OACS,KAApBb,EAAUa,MAMZ,GACED,SAASX,EAAYY,OAAS,GAC9BD,SAASf,EAAWgB,OAAS,GAC7BD,SAASZ,EAAUa,OAAS,EAE5BrB,EAAAE,OAAOwB,QAAQ,wCAIjB,GAAoC,IAAhCN,SAASX,EAAYY,OAAzB,CAKAX,EAAUY,UAAW,EAErB,IAAK,IAAIK,EAAI,EAAGA,EAAIP,SAASX,EAAYY,OAAQM,IAAK,CAIpDhB,EAHiBgB,EAAI,EACPP,SAASf,EAAWgB,OAASb,EAAUa,MAAQM,GAG1DC,MAAKb,IACJf,EAAAE,OAAO2B,QAAQd,EAAQ,IAExBe,OAAMd,IACLhB,EAAAE,OAAOwB,QAAQV,EAAO,G,OAf1BhB,EAAAE,OAAOwB,QAAQ,2CAdf1B,EAAAE,OAAOwB,QAAQ,8B","sources":["src/js/03-promises.js"],"sourcesContent":["'use strict';\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nNotify.init({ useIcon: false });\n\nconst inputDelay = document.querySelector(['[name=delay]']);\nconst inputStep = document.querySelector(['[name=step]']);\nconst inputAmount = document.querySelector(['[name=amount]']);\nconst submitBtn = document.querySelector('button');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n\n      if (position === parseInt(inputAmount.value)) {\n        submitBtn.disabled = false;\n      }\n    }, delay);\n  });\n}\n\nconst submitPromise = event => {\n  event.preventDefault();\n\n  if (\n    inputAmount.value === '' ||\n    inputDelay.value === '' ||\n    inputStep.value === ''\n  ) {\n    Notify.failure('❌ All fields must be filled');\n    return;\n  }\n\n  if (\n    parseInt(inputAmount.value) < 0 ||\n    parseInt(inputDelay.value) < 0 ||\n    parseInt(inputStep.value) < 0\n  ) {\n    Notify.failure('❌ A value could not be negative');\n    return;\n  }\n\n  if (parseInt(inputAmount.value) === 0) {\n    Notify.failure('❌ An amount must be greater than 0');\n    return;\n  }\n\n  submitBtn.disabled = true;\n\n  for (let i = 0; i < parseInt(inputAmount.value); i++) {\n    const position = i + 1;\n    const delay = parseInt(inputDelay.value) + inputStep.value * i;\n\n    createPromise(position, delay)\n      .then(resolve => {\n        Notify.success(resolve);\n      })\n      .catch(reject => {\n        Notify.failure(reject);\n      });\n  }\n};\n\nsubmitBtn.addEventListener('click', submitPromise);\n"],"names":["$iQIUW","parcelRequire","Notify","init","useIcon","$47d4ff9957288465$var$inputDelay","document","querySelector","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$submitBtn","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","parseInt","value","disabled","addEventListener","event","preventDefault","failure","i","then","success","catch"],"version":3,"file":"03-promises.ba8baf30.js.map"}